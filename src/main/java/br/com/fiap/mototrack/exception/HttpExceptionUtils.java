package br.com.fiap.mototrack.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.server.ResponseStatusException;

/**
 * # üì¶ HttpExceptionUtils
 *
 * Utilit√°rio centralizado para lan√ßar exce√ß√µes HTTP (`ResponseStatusException`)
 * com mensagens padronizadas e status apropriados em toda a aplica√ß√£o.
 *
 * ---
 *
 * ## üìã Como usar?
 * Utilize este utilit√°rio nos services, controllers ou handlers para padronizar as respostas de erro da API.
 *
 * ```java
 * throw HttpExceptionUtils.notFound("Usuario", id);
 * throw HttpExceptionUtils.badRequest("Campo obrigat√≥rio ausente");
 * throw HttpExceptionUtils.forbidden("Acesso negado ao recurso X");
 * throw HttpExceptionUtils.unauthorized("Token inv√°lido");
 * throw HttpExceptionUtils.internalError("Erro inesperado na aplica√ß√£o");
 * ```
 *
 * > **Vantagem:** Facilita manuten√ß√£o, testes, centraliza√ß√£o e internacionaliza√ß√£o das mensagens de erro.
 *
 * ---
 *
 * @author Rafael
 * @since 1.0
 */
public final class HttpExceptionUtils {

    /**
     * Construtor privado para evitar instancia√ß√£o.
     * Classe utilit√°ria: apenas m√©todos est√°ticos.
     */
    private HttpExceptionUtils() {
        // N√£o instanciar
    }

    // ============================
    // üö´ 404 - NOT FOUND
    // ============================

    /**
     * Lan√ßa uma exce√ß√£o HTTP 404 (`Not Found`) para uma entidade n√£o encontrada pelo ID.
     *
     * @param entidade Nome da entidade (ex: "Usuario", "Moto", "Filial")
     * @param id Valor do identificador buscado
     * @return ResponseStatusException 404, com mensagem padronizada
     *
     * **Exemplo:**
     * ```java
     * throw HttpExceptionUtils.notFound("Moto", 123);
     * // Mensagem: "Moto n√£o encontrada para o ID: 123"
     * ```
     */
    public static ResponseStatusException notFound(String entidade, Object id) {
        return new ResponseStatusException(
                HttpStatus.NOT_FOUND,
                String.format("%s n√£o encontrada para o ID: %s", entidade, id)
        );
    }

    /**
     * Lan√ßa uma exce√ß√£o HTTP 404 (`Not Found`) com uma mensagem customizada.
     *
     * @param mensagem Mensagem descritiva do erro
     * @return ResponseStatusException 404, com mensagem customizada
     *
     * **Exemplo:**
     * ```java
     * throw HttpExceptionUtils.notFound("Usu√°rio inativo n√£o pode ser consultado");
     * ```
     */
    public static ResponseStatusException notFound(String mensagem) {
        return new ResponseStatusException(HttpStatus.NOT_FOUND, mensagem);
    }

    // ============================
    // ‚ùå 400 - BAD REQUEST
    // ============================

    /**
     * Lan√ßa uma exce√ß√£o HTTP 400 (`Bad Request`) com uma mensagem customizada.
     *
     * @param mensagem Detalhe sobre o erro de requisi√ß√£o
     * @return ResponseStatusException 400, com mensagem customizada
     *
     * **Exemplo:**
     * ```java
     * throw HttpExceptionUtils.badRequest("Formato do campo 'email' inv√°lido");
     * ```
     */
    public static ResponseStatusException badRequest(String mensagem) {
        return new ResponseStatusException(HttpStatus.BAD_REQUEST, mensagem);
    }

    // ============================
    // üîí 403 - FORBIDDEN
    // ============================

    /**
     * Lan√ßa uma exce√ß√£o HTTP 403 (`Forbidden`) quando o usu√°rio n√£o tem permiss√£o para acessar o recurso.
     *
     * @param mensagem Mensagem explicando o motivo da restri√ß√£o
     * @return ResponseStatusException 403, com mensagem customizada
     *
     * **Exemplo:**
     * ```java
     * throw HttpExceptionUtils.forbidden("Acesso restrito a administradores");
     * ```
     */
    public static ResponseStatusException forbidden(String mensagem) {
        return new ResponseStatusException(HttpStatus.FORBIDDEN, mensagem);
    }

    // ============================
    // üîê 401 - UNAUTHORIZED
    // ============================

    /**
     * Lan√ßa uma exce√ß√£o HTTP 401 (`Unauthorized`) para casos de autentica√ß√£o inv√°lida ou ausente.
     *
     * @param mensagem Mensagem explicando o motivo da n√£o autoriza√ß√£o
     * @return ResponseStatusException 401, com mensagem customizada
     *
     * **Exemplo:**
     * ```java
     * throw HttpExceptionUtils.unauthorized("Token de autentica√ß√£o expirado");
     * ```
     */
    public static ResponseStatusException unauthorized(String mensagem) {
        return new ResponseStatusException(HttpStatus.UNAUTHORIZED, mensagem);
    }

    // ============================
    // üí£ 500 - INTERNAL SERVER ERROR
    // ============================

    /**
     * Lan√ßa uma exce√ß√£o HTTP 500 (`Internal Server Error`) para erros inesperados no servidor.
     *
     * @param mensagem Detalhe t√©cnico sobre o erro interno
     * @return ResponseStatusException 500, com mensagem customizada
     *
     * **Exemplo:**
     * ```java
     * throw HttpExceptionUtils.internalError("Erro ao processar a solicita√ß√£o: NullPointerException");
     * ```
     */
    public static ResponseStatusException internalError(String mensagem) {
        return new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, mensagem);
    }
}
